from pathlib import Path
import os
import pandas as pd


configfile: "config/config.yaml"


GB = 1_024
ont_samplesheet = pd.read_csv(config["ont_samplesheet"])
illumina_samplesheet = pd.read_csv(config["illumina_samplesheet"])

with open(config["final_samples"]) as fp:
    final_samples = sorted(set(fp.read().splitlines()))

WORKFLOW = Path("workflow").resolve()
SCRIPTS = WORKFLOW / "scripts"
ENVS = WORKFLOW / "envs"
RESULTS = Path("results").resolve()
LOGS = Path("logs/rules").resolve()
RESOURCES = Path("resources").resolve()
CONTAINERS = config["containers"]

target_files = set()


def sample_name(s: str) -> str:
    for sfx in ["_rep1", "_rep2", "-singleplex", "-multiplex"]:
        s = s.replace(sfx, "")
    return s


for _, row in ont_samplesheet.iterrows():
    alias = row["sample"]
    sample = sample_name(alias)
    if sample not in final_samples:
        continue
    tech = "nanopore"
    source = "sputum"

    target_files.add(RESULTS / f"reads/{tech}/{source}/submit/{alias}")

for _, row in illumina_samplesheet.iterrows():
    sample = row["sample"]
    source = row["source"]
    if sample not in final_samples:
        continue
    tech = "illumina"

    target_files.add(RESULTS / f"reads/{tech}/{source}/submit/{sample}")


rule all:
    input:
        target_files,


rule create_samples_xml:
    output:
        xml=RESULTS / "samples/samples.xml",
    log:
        LOGS / "create_samples_xml.log",
    params:
        date="2019",
        samples=final_samples,
    container:
        CONTAINERS["python"]
    script:
        str(SCRIPTS / "samples2xml.py")


rule submit_samples:
    input:
        samples=rules.create_samples_xml.output.xml,
        submission=RESOURCES / "submission.xml",
    output:
        response=RESULTS / "samples/response.xml",
    log:
        LOGS / "submit_samples.log",
    conda:
        str(ENVS / "curl.yaml")
    params:
        url="https://www.ebi.ac.uk/ena/submit/drop-box/submit/",
        # url="https://wwwdev.ebi.ac.uk/ena/submit/drop-box/submit/",
        uname=os.environ["UNAME"],
        passwd=os.environ["PASSWD"],
    shell:
        """
        curl -u {params.uname}:{params.passwd} \
          -F "SUBMISSION=@{input.submission}" \
          -F "SAMPLE=@{input.samples}" \
          {params.url} > {output.response} 2> {log}
        """


rule add_sample_accessions_to_sheet:
    input:
        xml=rules.submit_samples.output.response,
    output:
        csv=RESULTS / "samples/accessions.csv",
    log:
        LOGS / "add_sample_accessions_to_sheet.log",
    container:
        CONTAINERS["python"]
    script:
        str(SCRIPTS / "add_sample_accessions_to_sheet.py")


rule create_read_manifest:
    input:
        samples=rules.add_sample_accessions_to_sheet.output.csv,
    output:
        manifest=RESULTS / "reads/{tech}/{source}/{sample}.tsv",
    log:
        LOGS / "create_read_manifest/{tech}/{source}/{sample}.log",
    params:
        project=config["project_accession"],
        reads_dir=config["reads_dir"],
    conda:
        str(ENVS / "create_read_manifest.yaml")
    script:
        str(SCRIPTS / "create_read_manifest.py")


rule submit_read_data:
    input:
        manifest=rules.create_read_manifest.output.manifest,
    output:
        receipt=directory(RESULTS / "reads/{tech}/{source}/submit/{sample}"),
    log:
        LOGS / "submit_read_data/{tech}/{source}/{sample}.log",
    conda:
        str(ENVS / "submit_read_data.yaml")
    params:
        context="reads",
        uname=os.environ["UNAME"],
        passwd_envvar="PASSWD",
        opts="-test -submit",
    resources:
        mem_mb=lambda wildcards, attempt: int(4 * GB) * attempt,
    shell:
        """
        mkdir -p {output.receipt} 2> {log}
        ena-webin-cli {params.opts} -context {params.context} -manifest {input.manifest} \
          -username {params.uname} -passwordEnv={params.passwd_envvar} -inputDir / \
          -outputDir {output.receipt} &>> {log}
        """
